#include <ArduinoJson.h>
#include <EEPROM.h>
#include "EEPROM.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <buttonController.h>
#include <SPI.h>              // include libraries
#include <LoRa.h>

/*********OLED DISPLAY START*********************************************/
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
// Declaration for SSD1306 display connected using I2C
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
/**********OLED DISPLAY END****************************************************/


/******UART START****************************************/
#define RXp2 16
#define TXp2 17
void(* resetFunc) (void) = 0; //declare reset function @ address 0
/******UART END*****************************************/



/******LORA START*****************************************/
//lora esp32
const int csPin = 5;          // LoRa radio chip select
const int resetPin = 14;       // LoRa radio reset
const int irqPin = 2;         // change for your board; must be a hardware interrupt pin
byte msgCount = 0;            // count of outgoing messages
byte localAddress = 0xFF;     // address of this device
byte destination = 0xBB;      // destination to send to
unsigned long previousMillisTX = 0;
/******LORA END*****************************************/



const int nextPageButton = 1;
int pagesCount = 0;
int totalPages = 6;

int potentiometer1 = 26;
int potentiometer2 = 27;
int joystick1 = 34;
int joystick2 = 36;
int joystick3 = 35;
int joystick4 = 39;
int joybutton1 = 13;
int joybutton2 = 12;

int encoder1_DT = 15;;
int encoder1_CLK = 4;
int encoder1_btn = 3;

int encoder2_DT = 33;
int encoder2_CLK = 32;
int encoder2_btn = 25;





/********EEPROM memory start***********************/
int pot1_address = 1;
int pot2_address = 2;
int pot3_address = 3;
int pot4_address = 4;
int joy1_address = 5;
int joy2_address = 6;
int joy3_address = 7;
int joy4_address = 8;

int pot1Dir_address = 9;
int pot2Dir_address = 10;
int pot3Dir_address = 11;
int pot4Dir_address = 12;
int joy1Dir_address = 13;
int joy2Dir_address = 14;
int joy3Dir_address = 15;
int joy4Dir_address = 16;

int btn1Dir_address = 18;
int btn2Dir_address = 19;
int btn3Dir_address = 20;
int btn4Dir_address = 21; 

int servo1Dir_address = 22;
int servo2Dir_address = 23;

int motor1Dir_address = 24;
int motor2Dir_address = 25;
int motor3Dir_address = 26;
int motor4Dir_address = 27;

int rot1_address = 28;
int rot2_address = 29;
int rot1Dir_address = 30;
int rot2Dir_address = 31;

//String fwVersionSlave1 = 32;
//String firmwareSlave2_address = 32;

byte pot1_value, pot2_value, pot3_value, pot4_value, joy1_value, joy2_value, joy3_value, joy4_value;
byte pot1Dir_value, pot2Dir_value, pot3Dir_value, pot4Dir_value, joy1Dir_value, joy2Dir_value, joy3Dir_value, joy4Dir_value;
byte rot1_value, rot2_value, rot1Dir_value, rot2Dir_value;
byte btn1Dir_value,btn2Dir_value,btn3Dir_value,btn4Dir_value;
byte servo1Dir_value, servo2Dir_value;
byte motor1Dir_value,motor2Dir_value,motor3Dir_value,motor4Dir_value;
/***************EEPROM memory end***********/


/********LORA RECEIVE start*********/
int connectionStatus = 0;
int rsi, snr;
float temp;
int humi;
int btn1Status,btn2Status,btn3Status,btn4Status;
int pot1Status,pot2Status;
/********LORA RECEIVE end*********/


/************button controllers start****************************/
int buttonState[5];
int lastButton[5];
int currentButton[5];
int debounceDelay = 10;
unsigned long previousMillis = 0;

int button1State = 0;
int button2State = 0;
int button3State = 0;
int button4State = 0;
/************button controllers end*******************************/

/************rotary encoder start*********************************/
int currentStateCLK[3];
int lastStateCLK[3];
int encoder_counter[3];
int encoder1_counter = 0;
int encoder2_counter = 0;
/************rotary encoder end**********************************/


// void rotary_encoder(void *pvParameters);
void buttonsAndCotrollers(void *pvParameters);
void oled_display();
void lora_send_data();
void onReceive(int packetSize); 
void UART_RECEIVER_DATA();
void memorySaving();
void lora_init();


void IRAM_ATTR pagecount() {
      pagesCount++;
      if (pagesCount == totalPages) { 
        pagesCount = 0;
   }     
}

int pot1cursor, pot2cursor, joy1cursor, joy2cursor, joy3cursor, joy4cursor;
int pot1_level = 0;
int pot2_level = 0;
int joy1_level = 0;
int joy2_level = 0;
int joy3_level = 0;
int joy4_level = 0;

String firmwareVersionMaster = "v1.1.1";


void setup() {

  Serial.begin(115200);
  Serial2.begin(9600, SERIAL_8N1, RXp2, TXp2);
  lora_init();
  memorySaving();


  Wire.begin(); // join i2c bus (address optional for master)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(1);
  display.setCursor(40, 30);
  display.println("Restarted");
  display.display();

pinMode(nextPageButton, INPUT_PULLUP);
attachInterrupt(nextPageButton, pagecount, FALLING);


  
  // // Read the initial state of CLK
  // lastStateCLK1 = digitalRead(encoder1_CLK);
  // lastStateCLK2 = digitalRead(encoder2_CLK);
  // xTaskCreatePinnedToCore(
  //   rotary_encoder
  //   ,  "rotary_encoder"
  //   ,  1024  // Stack size
  //   ,  NULL
  //   ,  1  // Priority
  //   ,  NULL 
  //   ,  1);
  


  xTaskCreatePinnedToCore(
    buttonsAndCotrollers
    ,  "buttonsAndCotrollers"
    ,  1024  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  NULL 
    ,  1);
  
}



void loop() {
   //sending data to slave node lora
  lora_send_data();
  
  onReceive(LoRa.parsePacket());
  
  oled_display();

  UART_RECEIVER_DATA();
 
}

/*************POTENTIOMETERS & jOYSTICKS CONTROL TYPE AND DIRECTIOMN********************/
int adc_controller_dynamic_mapping(int value, int directionValue, int gpioName){
  int controller;
  
     if(value == 180 & directionValue == 0){ controller = map(analogRead(gpioName), 0, 4095, 0, 180);}
else if(value == 180 & directionValue == 1){ controller = map(analogRead(gpioName), 0, 4095, 180, 0);}
else if(value == 255 & directionValue == 0){ controller = map(analogRead(gpioName), 0, 4095, 0, 255);}
else if(value == 255 & directionValue == 1){ controller = map(analogRead(gpioName), 0, 4095, 255, 0);}
return controller;
}

/************POTENTIOMETERS & JOYSTICKS CURSOR POSITION CONTROLLER**********************/
int adc_controller_cursor_position(int value, int directionValue, int gpioLevel){
  int cursorPosition;
  
     if(value == 180 & directionValue == 0){ cursorPosition = map(gpioLevel, 180, 0, 0, 120);}
else if(value == 180 & directionValue == 1){ cursorPosition = map(gpioLevel, 180, 0, 120, 0);}
else if(value == 255 & directionValue == 0){ cursorPosition = map(gpioLevel, 255, 0, 0, 120);}
else if(value == 255 & directionValue == 1){ cursorPosition = map(gpioLevel, 255, 0, 120, 0);}
return cursorPosition;
}

/***********PUSH BUTTON AND TOGGLE BUTTON CONTROLLER***********************************/
int button_controller_status(int buttonGpioPin, int buttonIndex, int buttonType) {
  if (buttonType == 1) {
    unsigned long currentMillis = millis();
    if(currentMillis - previousMillis >= debounceDelay){
    currentButton[buttonIndex] = digitalRead(buttonGpioPin);
    if (currentButton[buttonIndex] != lastButton[buttonIndex]) {
      lastButton[buttonIndex] = currentButton[buttonIndex];
               previousMillis = currentMillis;
      
      if (lastButton[buttonIndex] == 0) {
        buttonState[buttonIndex] = (buttonState[buttonIndex] == 0) ? 1 : 0;
      }
    }
    }
  } else if (buttonType == 0) {
    buttonState[buttonIndex] = digitalRead(buttonGpioPin);
  }
  return buttonState[buttonIndex];
}

/************ROTARY ENCODER*************************************************************/
int rotary_encode_controller(int encoderCLK, int encoderDT,int index,int rotaryValue, int rotaryDirection){
  /**************roary encoder1*******************/
if(rotaryDirection == 0){
 // Read the current state of CLK
  currentStateCLK[index] = digitalRead(encoderCLK);  
     if (currentStateCLK[index] != lastStateCLK[index]  && currentStateCLK[index] == 1){
        if (digitalRead(encoderDT) != currentStateCLK[index]) {
          encoder_counter[index] --;
        } else {
          // Encoder is rotating CW so increment
          encoder_counter[index] ++;
        }
      }

if(encoder_counter[index] < 0){
  encoder_counter[index] = 0;
}
if(encoder_counter[index] > rotaryValue){
  encoder_counter[index] = rotaryValue;
}
      // Remember last CLK state
      lastStateCLK[index] = currentStateCLK[index];
}

else if(rotaryDirection == 1){
 // Read the current state of CLK
  currentStateCLK[index] = digitalRead(encoderCLK);  
     if (currentStateCLK[index] != lastStateCLK[index]  && currentStateCLK[index] == 1){
        if (digitalRead(encoderDT) != currentStateCLK[index]) {
          encoder_counter[index] ++;
        } else {
          // Encoder is rotating CW so increment
          encoder_counter[index] --;
        }
      }

if(encoder_counter[index] < 0){
  encoder_counter[index] = 0;
}
if(encoder_counter[index] > rotaryValue){
  encoder_counter[index] = rotaryValue;
}
      // Remember last CLK state
      lastStateCLK[index] = currentStateCLK[index];
}

return encoder_counter[index];
}




void oled_display(){
String connection = (connectionStatus == 0)?"Disconnected":"Connected"; 
String btn1Type = (btn1Dir_value == 0)?"P":"T";
String btn2Type = (btn2Dir_value == 0)?"P":"T";
String btn3Type = (btn3Dir_value == 0)?"P":"T";
String btn4Type = (btn4Dir_value == 0)?"P":"T";
String pot1Type = (pot1Dir_value == 0)?"L":"R";
String pot2Type = (pot2Dir_value == 0)?"L":"R";

String  servo1Dir_Type = (servo1Dir_value == 0)?"KNOB":"SWEEP";
String  servo2Dir_Type = (servo2Dir_value == 0)?"KNOB":"SWEEP";
String  motor1Dir_Type = (motor1Dir_value == 0)?"CLOCK":"ANTI-CLOCK";
String  motor2Dir_Type = (motor2Dir_value == 0)?"CLOCK":"ANTI-CLOCK";
String  motor3Dir_Type = (motor3Dir_value == 0)?"CLOCK":"ANTI-CLOCK";
String  motor4Dir_Type = (motor4Dir_value == 0)?"CLOCK":"ANTI-CLOCK";
  

 
  switch(pagesCount){
  
    case 0:
            display.clearDisplay();
            display.setTextColor(WHITE);
            display.setTextSize(1);
            display.setCursor(0, 0);//COL,ROW
            display.println("DASHBOARD");
            display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
            display.setCursor(0,12); display.print("STATUS:" + String(connection)); 
            display.setCursor(0,21); display.print("TEMP:" + String(temp));display.setCursor(60,21);display.print("  HUMI:" + String(humi)); 
            display.setCursor(0,31); display.print("RSSI:" + String(rsi));display.setCursor(60,31);display.print("  SNR:" + String(snr)); 
            display.setCursor(0,41); display.print("B1:" + String(button1State)+"["+ String(btn1Type)+"]"+String(btn1Status)); display.setCursor(60,41);display.print("| B2:" + String(button2State)+"["+ String(btn2Type)+"]"+String(btn2Status)); 
            display.setCursor(0,51); display.print("B3:" + String(button3State)+"["+ String(btn3Type)+"]"+String(btn3Status)); display.setCursor(60,51);display.print("| B4:" + String(button4State)+"["+ String(btn4Type)+"]"+String(btn4Status)); 
          break;
  
    case 1:
            display.clearDisplay();
            display.setTextColor(WHITE);
            display.setTextSize(1);
            display.setCursor(0, 0);//COL,ROW
            display.println("POTENTIOMETER");
            display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
            display.setCursor(0,10); display.print("POT1:"+String(pot1Type)+" "+String(pot1_level));display.setCursor(60,10);display.print(" ["+ String(pot1Status)+"]");
            display.setCursor(0,20); display.print("POT2:"+String(pot2Type)+" "+String(pot2_level));display.setCursor(60,20);display.print(" ["+ String(pot2Status)+"]"); 
            display.setCursor(0,30); display.print("ENC1:" + String(encoder1_counter)); display.setCursor(60,30);display.print("| ENC2:" + String(encoder2_counter)); 

            pot1cursor = adc_controller_cursor_position(pot1_value, pot1Dir_value, pot1_level);
            pot2cursor = adc_controller_cursor_position(pot2_value, pot2Dir_value, pot2_level);
            display.setCursor(pot1cursor,45); display.print("*");
            display.setCursor(0,45);display.print("---------------------");
            display.setCursor(pot2cursor,55); display.print("*");
            display.setCursor(0,55);display.print("---------------------");
          break;
          
    case 2:
            display.clearDisplay();
            display.setTextColor(WHITE);
            display.setTextSize(1);
            display.setCursor(0, 0);//COL,ROW
            display.println("JOYSTICKS");
            display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
            display.setCursor(0,10); display.print("JOY1:" + String(joy1_level));display.setCursor(60,12);display.print("| JOY2:" + String(joy2_level)); 
            display.setCursor(0,20); display.print("JOY3:" + String(joy3_level));display.setCursor(60,21);display.print("| JOY4:" + String(joy4_level)); 

            joy1cursor = adc_controller_cursor_position(joy1_value, joy1Dir_value, joy1_level);
            joy2cursor = adc_controller_cursor_position(joy2_value, joy2Dir_value, joy2_level);
            joy3cursor = adc_controller_cursor_position(joy3_value, joy3Dir_value, joy3_level);
            joy4cursor = adc_controller_cursor_position(joy4_value, joy4Dir_value, joy4_level);
            display.setCursor(joy1cursor,30); display.print("*");
            display.setCursor(0,30);display.print("---------------------");
            display.setCursor(joy2cursor,39); display.print("*");
            display.setCursor(0,39);display.print("---------------------");
            display.setCursor(joy3cursor,48); display.print("*");
            display.setCursor(0,48);display.print("---------------------");
            display.setCursor(joy4cursor,57); display.print("*");
            display.setCursor(0,57);display.print("---------------------");
            break;
    
    case 3:
            display.clearDisplay();
            display.setTextColor(WHITE);
            display.setTextSize(1);
            display.setCursor(0, 0);//COL,ROW
            display.println("SERVO");
            display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
       
            display.setCursor(0,12); display.print(" SERVO1 : " + String(servo1Dir_Type));   
            display.setCursor(0,21); display.print(" SERVO2 : " + String(servo2Dir_Type)); 
          break;      
    case 4:
            display.clearDisplay();
            display.setTextColor(WHITE);
            display.setTextSize(1);
            display.setCursor(0, 0);//COL,ROW
            display.println("MOTOR");
            display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
            
            display.setCursor(0,12); display.print(" MOTOR1: " + String(motor1Dir_Type));   
            display.setCursor(0,21); display.print(" MOTOR2: " + String(motor2Dir_Type)); 
            display.setCursor(0,31); display.print(" MOTOR3: " + String(motor3Dir_Type));   
            display.setCursor(0,41); display.print(" MOTOR4: " + String(motor4Dir_Type)); 
          break;
    case 5:
            display.clearDisplay();
            display.setTextColor(WHITE);
            display.setTextSize(1);
            display.setCursor(0, 0);//COL,ROW
            display.println("FIRMWARE");
            display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
           display.setCursor(0,12); display.print("Master(TX) : " + String(firmwareVersionMaster)); 
//           display.setCursor(0,22); display.print("Slave1(RX) : "); display.println(fwVersionSlave1); 
//           display.setCursor(0,32); display.print("SLave2(TX) : " + String(fwVersionSlave2)); 
           
//           display.setCursor(0,21); display.print(" POT2:" + String(pot2_value) + "  | "); display.setCursor(70,21);display.print(" BTN2:" + String(btn1Dir_value)); 
          break;
                   
  }
           display.display();

}

void buttonsAndCotrollers(void *pvParameters){

  (void) pvParameters;
pinMode(potentiometer1, INPUT);
pinMode(potentiometer2, INPUT);
pinMode(joystick1, INPUT);
pinMode(joystick2, INPUT);
pinMode(joystick3, INPUT);
pinMode(joystick4, INPUT);

pinMode(joybutton1, INPUT_PULLUP);
pinMode(joybutton2, INPUT_PULLUP);
pinMode(encoder1_btn, INPUT_PULLUP);
pinMode(encoder2_btn, INPUT_PULLUP);  

pinMode(encoder1_CLK,INPUT_PULLUP);
pinMode(encoder1_DT,INPUT_PULLUP);
pinMode(encoder2_CLK,INPUT_PULLUP);
pinMode(encoder2_DT,INPUT_PULLUP);

  for (;;)
  { 
    pot1_level = adc_controller_dynamic_mapping(pot1_value, pot1Dir_value, potentiometer1);
    pot2_level = adc_controller_dynamic_mapping(pot2_value, pot2Dir_value, potentiometer2);
    joy1_level = adc_controller_dynamic_mapping(joy1_value, joy1Dir_value, joystick1);
    joy2_level = adc_controller_dynamic_mapping(joy2_value, joy2Dir_value, joystick2);
    joy3_level = adc_controller_dynamic_mapping(joy3_value, joy3Dir_value, joystick3);
    joy4_level = adc_controller_dynamic_mapping(joy4_value, joy4Dir_value, joystick4);

    button1State = button_controller_status(joybutton1, 1, btn1Dir_value);
    button2State = button_controller_status(joybutton2, 2, btn2Dir_value);
    button3State = button_controller_status(encoder1_btn, 3, btn3Dir_value);
    button4State = button_controller_status(encoder2_btn, 4, btn4Dir_value);

    encoder1_counter = rotary_encode_controller(encoder1_CLK, encoder1_DT, 1 , rot1_value, rot1Dir_value);
    encoder2_counter = rotary_encode_controller(encoder2_CLK, encoder2_DT, 2 , rot2_value, rot2Dir_value);

// /*********potentiometer1************/
//      if(pot1_value == 180 & pot1Dir_value == 0){ potentiometer1Value = map(analogRead(potentiometer1), 0, 4095, 0, 180); }
// else if(pot1_value == 180 & pot1Dir_value == 1){ potentiometer1Value = map(analogRead(potentiometer1), 0, 4095, 180, 0); }
// else if(pot1_value == 255 & pot1Dir_value == 0){ potentiometer1Value = map(analogRead(potentiometer1), 0, 4095, 0, 255); }
// else if(pot1_value == 255 & pot1Dir_value == 1){ potentiometer1Value = map(analogRead(potentiometer1), 0, 4095, 255, 0); }

// /*********potentiometer2************/
//      if(pot2_value == 180 & pot2Dir_value == 0){ potentiometer2Value = map(analogRead(potentiometer2), 0, 4095, 0, 180); }
// else if(pot2_value == 180 & pot2Dir_value == 1){ potentiometer2Value = map(analogRead(potentiometer2), 0, 4095, 180, 0); }
// else if(pot2_value == 255 & pot2Dir_value == 0){ potentiometer2Value = map(analogRead(potentiometer2), 0, 4095, 0, 255); }
// else if(pot2_value == 255 & pot1Dir_value == 1){ potentiometer2Value = map(analogRead(potentiometer2), 0, 4095, 255, 0); }

// /*********joystick1************/
//      if(joy1_value == 180 & joy1Dir_value == 0){ joystick1Value = map(analogRead(joystick1), 0, 4095, 0, 180); }
// else if(joy1_value == 180 & joy1Dir_value == 1){ joystick1Value = map(analogRead(joystick1), 0, 4095, 180, 0); }
// else if(joy1_value == 255 & joy1Dir_value == 0){ joystick1Value = map(analogRead(joystick1), 0, 4095, 0, 255); }
// else if(joy1_value == 255 & joy1Dir_value == 1){ joystick1Value = map(analogRead(joystick1), 0, 4095, 255, 0); }

// /*********joystick2************/
//      if(joy2_value == 180 & joy2Dir_value == 0){ joystick2Value = map(analogRead(joystick2), 0, 4095, 0, 180); }
// else if(joy2_value == 180 & joy2Dir_value == 1){ joystick2Value = map(analogRead(joystick2), 0, 4095, 180, 0); }
// else if(joy2_value == 255 & joy2Dir_value == 0){ joystick2Value = map(analogRead(joystick2), 0, 4095, 0, 255); }
// else if(joy2_value == 255 & joy2Dir_value == 1){ joystick2Value = map(analogRead(joystick2), 0, 4095, 255, 0); }

// /*********joystick3************/
//      if(joy3_value == 180 & joy3Dir_value == 0){ joystick3Value = map(analogRead(joystick3), 0, 4095, 0, 180); }
// else if(joy3_value == 180 & joy3Dir_value == 1){ joystick3Value = map(analogRead(joystick3), 0, 4095, 180, 0); }
// else if(joy3_value == 255 & joy3Dir_value == 0){ joystick3Value = map(analogRead(joystick3), 0, 4095, 0, 255); }
// else if(joy3_value == 255 & joy3Dir_value == 1){ joystick3Value = map(analogRead(joystick3), 0, 4095, 255, 0); }

// /*********joystick4************/
//      if(joy4_value == 180 & joy4Dir_value == 0){ joystick4Value = map(analogRead(joystick4), 0, 4095, 0, 180); }
// else if(joy4_value == 180 & joy4Dir_value == 1){ joystick4Value = map(analogRead(joystick4), 0, 4095, 180, 0); }
// else if(joy4_value == 255 & joy4Dir_value == 0){ joystick4Value = map(analogRead(joystick4), 0, 4095, 0, 255); }
// else if(joy4_value == 255 & joy4Dir_value == 1){ joystick4Value = map(analogRead(joystick4), 0, 4095, 255, 0); }

    // /*********button1*********/
    // if(btn1Dir_value == 1){
    // int button1 = digitalRead(joybutton1);
    // if(button1 != lastButton1){
    //   lastButton1 = button1;
    //   if(lastButton1 == 0){
    //     button1State = (button1State == 0)?1:0;
    //   }
    // }
    // }
    // else if(btn1Dir_value == 0){
    //   button1State = digitalRead(joybutton1);
    // }

    // /*********button2*********/
    // if(btn2Dir_value == 1){
    // int button2 = digitalRead(joybutton2);
    // if(button2 != lastButton2){
    //   lastButton2 = button2;
    //   if(lastButton2 == 0){
    //     button2State = (button2State == 0)?1:0;
    //   }
    // }
    // }
    // else if(btn2Dir_value == 0){
    //   button2State = digitalRead(joybutton2);
    // }

    // /*********button3*********/
    // if(btn3Dir_value == 1){
    // int button3 = digitalRead(encoder1_btn);
    // if(button3 != lastButton3){
    //   lastButton3 = button3;
    //   if(lastButton3 == 0){
    //     button3State = (button3State == 0)?1:0;
    //   }
    // }
    // }
    // else if(btn3Dir_value == 0){
    //   button3State = digitalRead(encoder1_btn);
    // }

    // /*********button4*********/
// if(btn4Dir_value == 1){
// int button4 = digitalRead(encoder2_btn);
// if(button4 != lastButton4){
//   lastButton4 = button4;
//   if(lastButton4 == 0){
//     button4State = (button4State == 0)?1:0;
//   }
// }
// }
// else if(btn4Dir_value == 0){
//   button4State = digitalRead(encoder2_btn);
// }

vTaskDelay(1);
  }
}

// void rotary_encoder(void *pvParameters)  // This is a task.
// {
//   (void) pvParameters;
//   for (;;)
//   {
//     encoder1_counter = rotary_encode_controller(encoder1_CLK, encoder1_DT, 1 , rot1_value, rot1Dir_value);
//     encoder2_counter = rotary_encode_controller(encoder2_CLK, encoder2_DT, 2 , rot2_value, rot2Dir_value);
// // /**************roary encoder1*******************/
// // if(rot1Dir_value == 0){
// //  // Read the current state of CLK
// //   currentStateCLK1 = digitalRead(encoder1_CLK);  
// //      if (currentStateCLK1 != lastStateCLK1  && currentStateCLK1 == 1){
// //         if (digitalRead(encoder1_DT) != currentStateCLK1) {
// //           encoder1_counter --;
// //         } else {
// //           // Encoder is rotating CW so increment
// //           encoder1_counter ++;
// //         }
// //       }
// // if(encoder1_counter < 0){
// //   encoder1_counter = 0;
// // }
// // if(encoder1_counter > rot1_value){
// //   encoder1_counter = rot1_value;
// // }
// //       // Remember last CLK state
// //       lastStateCLK1 = currentStateCLK1;
// // }
// // else if(rot1Dir_value == 1){
// //  // Read the current state of CLK
// //   currentStateCLK1 = digitalRead(encoder1_CLK);  
// //      if (currentStateCLK1 != lastStateCLK1  && currentStateCLK1 == 1){
// //         if (digitalRead(encoder1_DT) != currentStateCLK1) {
// //           encoder1_counter ++;
// //         } else {
// //           // Encoder is rotating CW so increment
// //           encoder1_counter --;
// //         }
// //       }
// // if(encoder1_counter < 0){
// //   encoder1_counter = 0;
// // }
// // if(encoder1_counter > rot1_value){
// //   encoder1_counter = rot1_value;
// // }
// //       // Remember last CLK state
// //       lastStateCLK1 = currentStateCLK1;
// // }   
// // /**************roary encoder2*******************/
// // if(rot2Dir_value == 0){
// //  // Read the current state of CLK
// //   currentStateCLK2 = digitalRead(encoder2_CLK);  
// //      if (currentStateCLK2 != lastStateCLK2  && currentStateCLK2 == 1){
// //         if (digitalRead(encoder2_DT) != currentStateCLK2) {
// //           encoder2_counter --;
// //         } else {
// //           // Encoder is rotating CW so increment
// //           encoder2_counter ++;
// //         }
// //       }
// // if(encoder2_counter < 0){
// //   encoder2_counter = 0;
// // }
// // if(encoder2_counter > rot2_value){
// //   encoder2_counter = rot2_value;
// // }
// //       // Remember last CLK state
// //       lastStateCLK2 = currentStateCLK2;
// // }
// // else if(rot2Dir_value == 1){
// //  // Read the current state of CLK
// //   currentStateCLK2 = digitalRead(encoder2_CLK);  
// //      if (currentStateCLK2 != lastStateCLK2  && currentStateCLK2 == 1){
// //         if (digitalRead(encoder2_DT) != currentStateCLK2) {
// //           encoder2_counter ++;
// //         } else {
// //           // Encoder is rotating CW so increment
// //           encoder2_counter --;
// //         }
// //       }
// // if(encoder2_counter < 0){
// //   encoder2_counter = 0;
// // }
// // if(encoder2_counter > rot2_value){
// //   encoder2_counter = rot2_value;
// // }
// //       // Remember last CLK state
// //       lastStateCLK2 = currentStateCLK2;
// // }   
//     vTaskDelay(1);  // one tick delay (15ms) in between reads for stability
//   }
// }

void lora_send_data(){

  String SendJSONData;

  
    StaticJsonDocument<512> LORA_TX;
//DynamicJsonDocument LORA_TX(200);

   JsonArray button = LORA_TX.createNestedArray("btn");
    button.add(button1State);
    button.add(button2State);
    button.add(button3State);
    button.add(button4State);
            
    JsonArray potentiometers = LORA_TX.createNestedArray("pot");
    potentiometers.add(pot1_level);
    potentiometers.add(pot2_level);
    
    JsonArray joysticks = LORA_TX.createNestedArray("joy");
    joysticks.add(joy1_level);
    joysticks.add(joy2_level);
    joysticks.add(joy3_level);
    joysticks.add(joy4_level);    

    JsonArray rotaryEncoder = LORA_TX.createNestedArray("rot");
    rotaryEncoder.add(encoder1_counter);
    rotaryEncoder.add(encoder2_counter);
    
   JsonArray motor = LORA_TX.createNestedArray("motor");
    motor.add(motor1Dir_value);
    motor.add(motor2Dir_value);
    motor.add(motor3Dir_value);
    motor.add(motor4Dir_value);
            
    JsonArray servo = LORA_TX.createNestedArray("servo");
    servo.add(servo1Dir_value);
    servo.add(servo1Dir_value);

serializeJson(LORA_TX, SendJSONData);
//serializeJsonPretty(LORA_TX, SendJSONData);


  unsigned long currentMillisTX = millis();
  if (currentMillisTX - previousMillisTX >= 500) {
    previousMillisTX = currentMillisTX;
      Serial.println("Sending " + SendJSONData); 
      LoRa.beginPacket();                   // start packet
      LoRa.write(destination);              // add destination address
      LoRa.write(localAddress);             // add sender address
      LoRa.write(msgCount);                 // add message ID
      LoRa.write(SendJSONData.length());        // add payload length
      LoRa.print(SendJSONData);                 // add payload
      LoRa.endPacket();                     // finish packet and send it
      msgCount++;                           // increment message ID
      }  
}

void onReceive(int packetSize) {
  if (packetSize == 0) return;          // if there's no packet, return

  // read packet header bytes:
  int recipient = LoRa.read();          // recipient address
  byte sender = LoRa.read();            // sender address
  byte incomingMsgId = LoRa.read();     // incoming msg ID
  byte incomingLength = LoRa.read();    // incoming msg length

  String incoming = "";

  while (LoRa.available()) {
    incoming += (char)LoRa.read();
    connectionStatus = 1;
  }

  if (incomingLength != incoming.length()) {   // check length for error
    Serial.println("error: message length does not match length");
    return;                             // skip rest of function
  }

  // if the recipient isn't this device or broadcast,
  if (recipient != localAddress && recipient != 0xBB) {
    Serial.println("This message is not for me.");
    return;                             // skip rest of function
  }


StaticJsonDocument<512> LORA_RX;
  DeserializationError error = deserializeJson(LORA_RX, incoming);

  // Test if parsing succeeds.
  if (error) {
    Serial.print(F("deserializeJson() failed: "));
    Serial.println(error.f_str());
    return;
  }

  
//  const char* sensor = LORA_RX["sensor"];
//  long time = LORA_RX["time"];

//  fwVersionSlave1 = LORA_RX["firmware"];
  rsi = LORA_RX["rssi"];
  snr = LORA_RX["snr"];
  temp = LORA_RX["temp"];
  humi = LORA_RX["humi"];
  btn1Status = LORA_RX["btnState"][0];
  btn2Status = LORA_RX["btnState"][1];
  btn3Status = LORA_RX["btnState"][2];
  btn4Status = LORA_RX["btnState"][3];
  pot1Status = LORA_RX["potState"][0];
  pot2Status = LORA_RX["potState"][1];
  
  // if message is for this device, or broadcast, print details:
  Serial.print("Received from: 0x" + String(sender, HEX));
  Serial.print(", Sent to: 0x" + String(recipient, HEX));
  Serial.print(", Message ID: " + String(incomingMsgId));
  Serial.print(", Message length: " + String(incomingLength));
  Serial.print(", RSSI: " + String(LoRa.packetRssi()));
  Serial.println(", Snr: " + String(LoRa.packetSnr()));
  Serial.println("Incoming Message: " + incoming);
  Serial.println();
  
}

void UART_RECEIVER_DATA(){
   if (Serial2.available() > 0) {
    String UART_incomingData = Serial2.readString();
    Serial.print("UART_incomingData: ");
    Serial.println(UART_incomingData);

    StaticJsonDocument<1024> UART_RX;
    DeserializationError error = deserializeJson(UART_RX, UART_incomingData);

//    String firmware = LORA_RX["firmware"];

    int btn1 = UART_RX["button"][0];
    int btn2 = UART_RX["button"][1];
    int btn3 = UART_RX["button"][2];
    int btn4 = UART_RX["button"][3];
    
    int pot1 = UART_RX["potentiometers"][0];
    int pot1Dir = UART_RX["potentiometers"][1];
    int pot2 = UART_RX["potentiometers"][2];
    int pot2Dir = UART_RX["potentiometers"][3];
    int pot3 = UART_RX["potentiometers"][4];
    int pot3Dir = UART_RX["potentiometers"][5];
    int pot4 = UART_RX["potentiometers"][6];
    int pot4Dir = UART_RX["potentiometers"][7];
    
    int joy1 = UART_RX["joysticks"][0];
    int joy1Dir = UART_RX["joysticks"][1];
    int joy2 = UART_RX["joysticks"][2];
    int joy2Dir = UART_RX["joysticks"][3];
    int joy3 = UART_RX["joysticks"][4];
    int joy3Dir = UART_RX["joysticks"][5];
    int joy4 = UART_RX["joysticks"][6];
    int joy4Dir = UART_RX["joysticks"][7];

    int motor1 = UART_RX["motors"][0];
    int motor2 = UART_RX["motors"][1];
    int motor3 = UART_RX["motors"][2];
    int motor4 = UART_RX["motors"][3];

    int servo1 = UART_RX["servos"][0];
    int servo2 = UART_RX["servos"][1];

    int rot1 = UART_RX["rotaryEncoder"][0];
    int rot1Dir = UART_RX["rotaryEncoder"][1];
    int rot2 = UART_RX["rotaryEncoder"][2];
    int rot2Dir = UART_RX["rotaryEncoder"][3];

    EEPROM.write(btn1Dir_address, btn1);
    EEPROM.write(btn2Dir_address, btn2);
    EEPROM.write(btn3Dir_address, btn3);
    EEPROM.write(btn4Dir_address, btn4);
    EEPROM.write(pot1_address, pot1);
    EEPROM.write(pot2_address, pot2);
    EEPROM.write(pot3_address, pot3);
    EEPROM.write(pot4_address, pot4);
    EEPROM.write(pot1Dir_address, pot1Dir);  
    EEPROM.write(pot2Dir_address, pot2Dir);    
    EEPROM.write(pot3Dir_address, pot3Dir);
    EEPROM.write(pot4Dir_address, pot4Dir); 
    EEPROM.write(joy1_address, joy1);
    EEPROM.write(joy2_address, joy2);
    EEPROM.write(joy3_address, joy3);
    EEPROM.write(joy4_address, joy4);
    EEPROM.write(joy1Dir_address, joy1Dir);
    EEPROM.write(joy2Dir_address, joy2Dir);
    EEPROM.write(joy3Dir_address, joy3Dir);
    EEPROM.write(joy4Dir_address, joy4Dir);
    EEPROM.write(motor1Dir_address, motor1);
    EEPROM.write(motor2Dir_address, motor2);
    EEPROM.write(motor3Dir_address, motor3);
    EEPROM.write(motor4Dir_address, motor4);
    EEPROM.write(servo1Dir_address, servo1);
    EEPROM.write(servo2Dir_address, servo2);
    EEPROM.write(rot1_address, rot1);
    EEPROM.write(rot2_address, rot2);
    EEPROM.write(rot1Dir_address, rot1Dir);  
    EEPROM.write(rot2Dir_address, rot2Dir);         
    EEPROM.commit();

delay(1000);
resetFunc();  //call reset

//    Serial.println("btn1:" + String(btn1));
  }
}

void memorySaving(){
  Serial.println("Memory saved");
  EEPROM.begin(255);
   
  pot1_value = EEPROM.read(pot1_address);//EEPROM.read(ADDRESS 0-255);
  pot2_value = EEPROM.read(pot2_address);//EEPROM.read(ADDRESS 0-255);
  pot3_value = EEPROM.read(pot3_address);//EEPROM.read(ADDRESS 0-255);
  pot4_value = EEPROM.read(pot4_address);//EEPROM.read(ADDRESS 0-255);
  joy1_value = EEPROM.read(joy1_address);//EEPROM.read(ADDRESS 0-255);
  joy2_value = EEPROM.read(joy2_address);//EEPROM.read(ADDRESS 0-255);
  joy3_value = EEPROM.read(joy3_address);//EEPROM.read(ADDRESS 0-255);
  joy4_value = EEPROM.read(joy4_address);//EEPROM.read(ADDRESS 0-255);

  pot1Dir_value = EEPROM.read(pot1Dir_address);//EEPROM.read(ADDRESS 0-255);
  pot2Dir_value = EEPROM.read(pot2Dir_address);//EEPROM.read(ADDRESS 0-255);
  pot3Dir_value = EEPROM.read(pot3Dir_address);//EEPROM.read(ADDRESS 0-255);
  pot4Dir_value = EEPROM.read(pot4Dir_address);//EEPROM.read(ADDRESS 0-255);
  joy1Dir_value = EEPROM.read(joy1Dir_address);//EEPROM.read(ADDRESS 0-255);
  joy2Dir_value = EEPROM.read(joy2Dir_address);//EEPROM.read(ADDRESS 0-255);
  joy3Dir_value = EEPROM.read(joy3Dir_address);//EEPROM.read(ADDRESS 0-255);
  joy4Dir_value = EEPROM.read(joy4Dir_address);//EEPROM.read(ADDRESS 0-255); 

  btn1Dir_value = EEPROM.read(btn1Dir_address);//EEPROM.read(ADDRESS 0-255);
  btn2Dir_value = EEPROM.read(btn2Dir_address);//EEPROM.read(ADDRESS 0-255);
  btn3Dir_value = EEPROM.read(btn3Dir_address);//EEPROM.read(ADDRESS 0-255);
  btn4Dir_value = EEPROM.read(btn4Dir_address);//EEPROM.read(ADDRESS 0-255);

  servo1Dir_value = EEPROM.read(servo1Dir_address);//EEPROM.read(ADDRESS 0-255);
  servo2Dir_value = EEPROM.read(servo2Dir_address);//EEPROM.read(ADDRESS 0-255);

  motor1Dir_value = EEPROM.read(motor1Dir_address);//EEPROM.read(ADDRESS 0-255);
  motor2Dir_value = EEPROM.read(motor2Dir_address);//EEPROM.read(ADDRESS 0-255);
  motor3Dir_value = EEPROM.read(motor3Dir_address);//EEPROM.read(ADDRESS 0-255);
  motor4Dir_value = EEPROM.read(motor4Dir_address);//EEPROM.read(ADDRESS 0-255);

  rot1_value = EEPROM.read(rot1_address);//EEPROM.read(ADDRESS 0-255);
  rot2_value = EEPROM.read(rot2_address);//EEPROM.read(ADDRESS 0-255);
  rot1Dir_value = EEPROM.read(rot1Dir_address);//EEPROM.read(ADDRESS 0-255);
  rot2Dir_value = EEPROM.read(rot2Dir_address);//EEPROM.read(ADDRESS 0-255);

//  Serial.println("Read =  btn1:" + String(btn1Dir_value)+", btn2:" + String(btn2Dir_value)+", btn3:" + String(btn3Dir_value)+", btn4:" + String(btn4Dir_value));
//  Serial.println("Read =  joy1:" + String(joy1_value)+"["+String(joy1Dir_value)+"], joy2:" + String(joy2_value)+"["+String(joy2Dir_value)+"], joy3:" + String(joy3_value)+"["+String(joy3Dir_value)+"], joy4:" + String(joy4_value)+"["+String(joy4Dir_value)+"]");
//  Serial.println("Read =  pot1:" + String(pot1_value)+"["+String(pot1Dir_value)+"], pot2:" + String(pot2_value)+"["+String(pot2Dir_value)+"], pot3:" + String(pot3_value)+"["+String(pot3Dir_value)+"], pot4:" + String(pot4_value)+"["+String(pot4Dir_value)+"]");
//  Serial.println("Read =  servo1:" + String(servo1Dir_value)+",servo2:" + String(servo2Dir_value));
//  Serial.println("Read =  motor1:" + String(motor1Dir_value)+", motor2:" + String(motor2Dir_value)+", motor3:" + String(motor3Dir_value)+", motor4:" + String(motor4Dir_value));
//  Serial.println("Read =  rot1:" + String(rot1_value)+"["+String(rot1Dir_value)+"], rot2:" + String(rot2_value)+"["+String(rot2Dir_value)+"]");
//  Serial.println("");
//  delay(2000);
}

void lora_init(){
      Serial.println("LoRa Duplex");

  // override the default CS, reset, and IRQ pins (optional)
  LoRa.setPins(csPin, resetPin, irqPin);// set CS, reset, IRQ pin

  if (!LoRa.begin(433E6)) {             // initialize ratio at 915 MHz
    Serial.println("LoRa init failed. Check your connections.");
    while (true);                       // if failed, do nothing
  }

  Serial.println("LoRa init succeeded.");
}
